declare const X_base: {
    new (t: any, i: any): {
        _element: any;
        _config: any;
        dispose(): void;
        _queueCallback(t: any, e: any, i?: boolean): void;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    getInstance(t: any): any;
    getOrCreateInstance(t: any, e?: {}): any;
    get VERSION(): string;
    get DATA_KEY(): string;
    get EVENT_KEY(): string;
    eventName(t: any): string;
    get Default(): {};
    get DefaultType(): {};
    get NAME(): void;
};
declare class X extends X_base {
    static get NAME(): string;
    static jQueryInterface(t: any): any;
    close(): void;
    _destroyElement(): void;
}
declare const U_base: {
    new (t: any, i: any): {
        _element: any;
        _config: any;
        dispose(): void;
        _queueCallback(t: any, e: any, i?: boolean): void;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    getInstance(t: any): any;
    getOrCreateInstance(t: any, e?: {}): any;
    get VERSION(): string;
    get DATA_KEY(): string;
    get EVENT_KEY(): string;
    eventName(t: any): string;
    get Default(): {};
    get DefaultType(): {};
    get NAME(): void;
};
declare class U extends U_base {
    static get NAME(): string;
    static jQueryInterface(t: any): any;
    toggle(): void;
}
declare const St_base: {
    new (t: any, i: any): {
        _element: any;
        _config: any;
        dispose(): void;
        _queueCallback(t: any, e: any, i?: boolean): void;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    getInstance(t: any): any;
    getOrCreateInstance(t: any, e?: {}): any;
    get VERSION(): string;
    get DATA_KEY(): string;
    get EVENT_KEY(): string;
    eventName(t: any): string;
    get Default(): {};
    get DefaultType(): {};
    get NAME(): void;
};
declare class St extends St_base {
    static get Default(): {
        interval: number;
        keyboard: boolean;
        pause: string;
        ride: boolean;
        touch: boolean;
        wrap: boolean;
    };
    static get DefaultType(): {
        interval: string;
        keyboard: string;
        pause: string;
        ride: string;
        touch: string;
        wrap: string;
    };
    static get NAME(): string;
    static jQueryInterface(t: any): any;
    _interval: NodeJS.Timeout | null;
    _activeElement: any;
    _isSliding: boolean;
    touchTimeout: NodeJS.Timeout | null;
    _swipeHelper: {
        _element: any;
        _config: any;
        _deltaX: number | undefined;
        _supportPointerEvents: boolean | undefined;
        dispose(): void;
        _start(t: any): void;
        _end(t: any): void;
        _move(t: any): void;
        _handleSwipe(): void;
        _initEvents(): void;
        _eventIsPointerPenTouch(t: any): boolean | undefined;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    } | null;
    _indicatorsElement: Element | null;
    next(): void;
    nextWhenVisible(): void;
    prev(): void;
    pause(): void;
    cycle(): void;
    _maybeEnableCycle(): void;
    to(t: any): undefined;
    _addEventListeners(): void;
    _addTouchEventListeners(): void;
    _keydown(t: any): void;
    _getItemIndex(t: any): number;
    _setActiveIndicatorElement(t: any): void;
    _updateInterval(): void;
    _slide(t: any, e?: null): void;
    _isAnimated(): any;
    _getActive(): Element | null;
    _getItems(): never[];
    _clearInterval(): void;
    _directionToOrder(t: any): "next" | "prev";
    _orderToDirection(t: any): "left" | "right";
}
declare const qt_base: {
    new (t: any, i: any): {
        _element: any;
        _config: any;
        dispose(): void;
        _queueCallback(t: any, e: any, i?: boolean): void;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    getInstance(t: any): any;
    getOrCreateInstance(t: any, e?: {}): any;
    get VERSION(): string;
    get DATA_KEY(): string;
    get EVENT_KEY(): string;
    eventName(t: any): string;
    get Default(): {};
    get DefaultType(): {};
    get NAME(): void;
};
declare class qt extends qt_base {
    static get Default(): {
        parent: null;
        toggle: boolean;
    };
    static get DefaultType(): {
        parent: string;
        toggle: string;
    };
    static get NAME(): string;
    static jQueryInterface(t: any): any;
    _isTransitioning: boolean;
    _triggerArray: any[];
    toggle(): void;
    show(): void;
    hide(): void;
    _isShown(t?: any): any;
    _getDimension(): "width" | "height";
    _initializeChildren(): void;
    _getFirstLevelChildren(t: any): never[];
    _addAriaAndCollapsedClass(t: any, e: any): void;
}
declare const Qi_base: {
    new (t: any, i: any): {
        _element: any;
        _config: any;
        dispose(): void;
        _queueCallback(t: any, e: any, i?: boolean): void;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    getInstance(t: any): any;
    getOrCreateInstance(t: any, e?: {}): any;
    get VERSION(): string;
    get DATA_KEY(): string;
    get EVENT_KEY(): string;
    eventName(t: any): string;
    get Default(): {};
    get DefaultType(): {};
    get NAME(): void;
};
declare class Qi extends Qi_base {
    static get Default(): {
        autoClose: boolean;
        boundary: string;
        display: string;
        offset: number[];
        popperConfig: null;
        reference: string;
    };
    static get DefaultType(): {
        autoClose: string;
        boundary: string;
        display: string;
        offset: string;
        popperConfig: string;
        reference: string;
    };
    static get NAME(): string;
    static jQueryInterface(t: any): any;
    static clearMenus(t: any): void;
    static dataApiKeydownHandler(t: any): undefined;
    _popper: {
        state: {
            placement: string;
            orderedModifiers: never[];
            options: any;
            modifiersData: {};
            elements: {
                reference: any;
                popper: any;
            };
            attributes: {};
            styles: {};
        };
        setOptions: (i: any) => any;
        forceUpdate: () => void;
        update: () => any;
        destroy: () => void;
    } | null;
    _parent: any;
    _menu: any;
    _inNavbar: boolean;
    toggle(): void;
    show(): void;
    hide(): void;
    update(): void;
    _completeHide(t: any): void;
    _createPopper(): void;
    _isShown(): any;
    _getPlacement(): "top" | "bottom" | "top-end" | "top-start" | "bottom-end" | "bottom-start" | "left-start" | "right-start";
    _detectNavbar(): boolean;
    _getOffset(): any;
    _getPopperConfig(): any;
    _selectMenuItem({ key: t, target: e }: {
        key: any;
        target: any;
    }): void;
}
declare const Ln_base: {
    new (t: any, i: any): {
        _element: any;
        _config: any;
        dispose(): void;
        _queueCallback(t: any, e: any, i?: boolean): void;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    getInstance(t: any): any;
    getOrCreateInstance(t: any, e?: {}): any;
    get VERSION(): string;
    get DATA_KEY(): string;
    get EVENT_KEY(): string;
    eventName(t: any): string;
    get Default(): {};
    get DefaultType(): {};
    get NAME(): void;
};
declare class Ln extends Ln_base {
    static get Default(): {
        backdrop: boolean;
        focus: boolean;
        keyboard: boolean;
    };
    static get DefaultType(): {
        backdrop: string;
        focus: string;
        keyboard: string;
    };
    static get NAME(): string;
    static jQueryInterface(t: any, e: any): any;
    _dialog: Element | null;
    _backdrop: {
        _config: any;
        _isAppended: boolean;
        _element: HTMLDivElement | null;
        show(t: any): undefined;
        hide(t: any): void;
        dispose(): void;
        _getElement(): HTMLDivElement;
        _configAfterMerge(t: any): any;
        _append(): void;
        _emulateAnimation(t: any): void;
        _getConfig(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    _focustrap: {
        _config: any;
        _isActive: boolean;
        _lastTabNavDirection: string | null;
        activate(): void;
        deactivate(): void;
        _handleFocusin(t: any): void;
        _handleKeydown(t: any): void;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    _isShown: boolean;
    _isTransitioning: boolean;
    _scrollBar: {
        _element: HTMLElement;
        getWidth(): number;
        hide(): void;
        reset(): void;
        isOverflowing(): boolean;
        _disableOverFlow(): void;
        _setElementAttributes(t: any, e: any, i: any): void;
        _saveInitialAttribute(t: any, e: any): void;
        _resetElementAttributes(t: any, e: any): void;
        _applyManipulationCallback(t: any, e: any): void;
    };
    toggle(t: any): void;
    show(t: any): void;
    hide(): void;
    handleUpdate(): void;
    _initializeBackDrop(): {
        _config: any;
        _isAppended: boolean;
        _element: HTMLDivElement | null;
        show(t: any): undefined;
        hide(t: any): void;
        dispose(): void;
        _getElement(): HTMLDivElement;
        _configAfterMerge(t: any): any;
        _append(): void;
        _emulateAnimation(t: any): void;
        _getConfig(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    _initializeFocusTrap(): {
        _config: any;
        _isActive: boolean;
        _lastTabNavDirection: string | null;
        activate(): void;
        deactivate(): void;
        _handleFocusin(t: any): void;
        _handleKeydown(t: any): void;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    _showElement(t: any): void;
    _addEventListeners(): void;
    _hideModal(): void;
    _isAnimated(): any;
    _triggerBackdropTransition(): void;
    _adjustDialog(): void;
    _resetAdjustments(): void;
}
declare const Qn_base: {
    new (t: any, i: any): {
        _element: any;
        _config: any;
        dispose(): void;
        _queueCallback(t: any, e: any, i?: boolean): void;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    getInstance(t: any): any;
    getOrCreateInstance(t: any, e?: {}): any;
    get VERSION(): string;
    get DATA_KEY(): string;
    get EVENT_KEY(): string;
    eventName(t: any): string;
    get Default(): {};
    get DefaultType(): {};
    get NAME(): void;
};
declare class Qn extends Qn_base {
    static get Default(): {
        backdrop: boolean;
        keyboard: boolean;
        scroll: boolean;
    };
    static get DefaultType(): {
        backdrop: string;
        keyboard: string;
        scroll: string;
    };
    static get NAME(): string;
    static jQueryInterface(t: any): any;
    _isShown: boolean;
    _backdrop: {
        _config: any;
        _isAppended: boolean;
        _element: HTMLDivElement | null;
        show(t: any): undefined;
        hide(t: any): void;
        dispose(): void;
        _getElement(): HTMLDivElement;
        _configAfterMerge(t: any): any;
        _append(): void;
        _emulateAnimation(t: any): void;
        _getConfig(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    _focustrap: {
        _config: any;
        _isActive: boolean;
        _lastTabNavDirection: string | null;
        activate(): void;
        deactivate(): void;
        _handleFocusin(t: any): void;
        _handleKeydown(t: any): void;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    toggle(t: any): void;
    show(t: any): void;
    hide(): void;
    _initializeBackDrop(): {
        _config: any;
        _isAppended: boolean;
        _element: HTMLDivElement | null;
        show(t: any): undefined;
        hide(t: any): void;
        dispose(): void;
        _getElement(): HTMLDivElement;
        _configAfterMerge(t: any): any;
        _append(): void;
        _emulateAnimation(t: any): void;
        _getConfig(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    _initializeFocusTrap(): {
        _config: any;
        _isActive: boolean;
        _lastTabNavDirection: string | null;
        activate(): void;
        deactivate(): void;
        _handleFocusin(t: any): void;
        _handleKeydown(t: any): void;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    _addEventListeners(): void;
}
declare const vs_base: {
    new (t: any, e: any): {
        _isEnabled: boolean;
        _timeout: number;
        _isHovered: boolean | null;
        _activeTrigger: {};
        _popper: {
            state: {
                placement: string;
                orderedModifiers: never[];
                options: any;
                modifiersData: {};
                elements: {
                    reference: any;
                    popper: any;
                };
                attributes: {};
                styles: {};
            };
            setOptions: (i: any) => any;
            forceUpdate: () => void;
            update: () => any;
            destroy: () => void;
        } | null;
        _templateFactory: {
            _config: any;
            getContent(): any[];
            hasContent(): boolean;
            changeContent(t: any): /*elided*/ any;
            toHtml(): Element | undefined;
            _typeCheckConfig(t: any): void;
            _checkContent(t: any): void;
            _setContent(t: any, e: any, i: any): void;
            _maybeSanitize(t: any): any;
            _resolvePossibleFunction(t: any): any;
            _putElementInTemplate(t: any, e: any): undefined;
            _getConfig(t: any): any;
            _configAfterMerge(t: any): any;
            _mergeConfigObj(t: any, e: any): any;
        } | null;
        _newContent: any;
        tip: any;
        enable(): void;
        disable(): void;
        toggleEnabled(): void;
        toggle(): void;
        dispose(): void;
        show(): void;
        hide(): void;
        update(): void;
        _isWithContent(): boolean;
        _getTipElement(): any;
        _createTipElement(t: any): any;
        setContent(t: any): void;
        _getTemplateFactory(t: any): {
            _config: any;
            getContent(): any[];
            hasContent(): boolean;
            changeContent(t: any): /*elided*/ any;
            toHtml(): Element | undefined;
            _typeCheckConfig(t: any): void;
            _checkContent(t: any): void;
            _setContent(t: any, e: any, i: any): void;
            _maybeSanitize(t: any): any;
            _resolvePossibleFunction(t: any): any;
            _putElementInTemplate(t: any, e: any): undefined;
            _getConfig(t: any): any;
            _configAfterMerge(t: any): any;
            _mergeConfigObj(t: any, e: any): any;
        };
        _getContentForTemplate(): {
            ".tooltip-inner": any;
        };
        _getTitle(): any;
        _initializeOnDelegatedTarget(t: any): any;
        _isAnimated(): any;
        _isShown(): any;
        _createPopper(t: any): {
            state: {
                placement: string;
                orderedModifiers: never[];
                options: any;
                modifiersData: {};
                elements: {
                    reference: any;
                    popper: any;
                };
                attributes: {};
                styles: {};
            };
            setOptions: (i: any) => any;
            forceUpdate: () => void;
            update: () => any;
            destroy: () => void;
        };
        _getOffset(): any;
        _resolvePossibleFunction(t: any): any;
        _getPopperConfig(t: any): any;
        _setListeners(): void;
        _hideModalHandler: (() => void) | undefined;
        _fixTitle(): void;
        _enter(): void;
        _leave(): void;
        _setTimeout(t: any, e: any): void;
        _isWithActiveTrigger(): boolean;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _getDelegateConfig(): {
            selector: boolean;
            trigger: string;
        };
        _disposePopper(): void;
        _element: any;
        _config: any;
        _queueCallback(t: any, e: any, i?: boolean): void;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    get Default(): {
        allowList: {
            "*": (string | RegExp)[];
            a: string[];
            area: never[];
            b: never[];
            br: never[];
            col: never[];
            code: never[];
            dd: never[];
            div: never[];
            dl: never[];
            dt: never[];
            em: never[];
            hr: never[];
            h1: never[];
            h2: never[];
            h3: never[];
            h4: never[];
            h5: never[];
            h6: never[];
            i: never[];
            img: string[];
            li: never[];
            ol: never[];
            p: never[];
            pre: never[];
            s: never[];
            small: never[];
            span: never[];
            sub: never[];
            sup: never[];
            strong: never[];
            u: never[];
            ul: never[];
        };
        animation: boolean;
        boundary: string;
        container: boolean;
        customClass: string;
        delay: number;
        fallbackPlacements: string[];
        html: boolean;
        offset: number[];
        placement: string;
        popperConfig: null;
        sanitize: boolean;
        sanitizeFn: null;
        selector: boolean;
        template: string;
        title: string;
        trigger: string;
    };
    get DefaultType(): {
        allowList: string;
        animation: string;
        boundary: string;
        container: string;
        customClass: string;
        delay: string;
        fallbackPlacements: string;
        html: string;
        offset: string;
        placement: string;
        popperConfig: string;
        sanitize: string;
        sanitizeFn: string;
        selector: string;
        template: string;
        title: string;
        trigger: string;
    };
    get NAME(): string;
    jQueryInterface(t: any): any;
    getInstance(t: any): any;
    getOrCreateInstance(t: any, e?: {}): any;
    get VERSION(): string;
    get DATA_KEY(): string;
    get EVENT_KEY(): string;
    eventName(t: any): string;
};
declare class vs extends vs_base {
    static get Default(): {
        content: string;
        offset: number[];
        placement: string;
        template: string;
        trigger: string;
        allowList: {
            "*": (string | RegExp)[];
            a: string[];
            area: never[];
            b: never[];
            br: never[];
            col: never[];
            code: never[];
            dd: never[];
            div: never[];
            dl: never[];
            dt: never[];
            em: never[];
            hr: never[];
            h1: never[];
            h2: never[];
            h3: never[];
            h4: never[];
            h5: never[];
            h6: never[];
            i: never[];
            img: string[];
            li: never[];
            ol: never[];
            p: never[];
            pre: never[];
            s: never[];
            small: never[];
            span: never[];
            sub: never[];
            sup: never[];
            strong: never[];
            u: never[];
            ul: never[];
        };
        animation: boolean;
        boundary: string;
        container: boolean;
        customClass: string;
        delay: number;
        fallbackPlacements: string[];
        html: boolean;
        popperConfig: null;
        sanitize: boolean;
        sanitizeFn: null;
        selector: boolean;
        title: string;
    };
    static get DefaultType(): {
        content: string;
        allowList: string;
        animation: string;
        boundary: string;
        container: string;
        customClass: string;
        delay: string;
        fallbackPlacements: string;
        html: string;
        offset: string;
        placement: string;
        popperConfig: string;
        sanitize: string;
        sanitizeFn: string;
        selector: string;
        template: string;
        title: string;
        trigger: string;
    };
    _isWithContent(): any;
    _getContentForTemplate(): {
        ".popover-header": any;
        ".popover-body": any;
    };
    _getContent(): any;
}
declare const Ss_base: {
    new (t: any, i: any): {
        _element: any;
        _config: any;
        dispose(): void;
        _queueCallback(t: any, e: any, i?: boolean): void;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    getInstance(t: any): any;
    getOrCreateInstance(t: any, e?: {}): any;
    get VERSION(): string;
    get DATA_KEY(): string;
    get EVENT_KEY(): string;
    eventName(t: any): string;
    get Default(): {};
    get DefaultType(): {};
    get NAME(): void;
};
declare class Ss extends Ss_base {
    static get Default(): {
        offset: null;
        rootMargin: string;
        smoothScroll: boolean;
        target: null;
        threshold: number[];
    };
    static get DefaultType(): {
        offset: string;
        rootMargin: string;
        smoothScroll: string;
        target: string;
        threshold: string;
    };
    static get NAME(): string;
    static jQueryInterface(t: any): any;
    _targetLinks: Map<any, any>;
    _observableSections: Map<any, any>;
    _rootElement: any;
    _activeTarget: any;
    _observer: IntersectionObserver | null;
    _previousScrollData: {
        visibleEntryTop: number;
        parentScrollTop: number;
    };
    refresh(): void;
    _maybeEnableSmoothScroll(): void;
    _getNewObserver(): IntersectionObserver;
    _observerCallback(t: any): void;
    _initializeTargetsAndObservables(): void;
    _process(t: any): void;
    _activateParents(t: any): void;
    _clearActiveClass(t: any): void;
}
declare const Zs_base: {
    new (t: any, i: any): {
        _element: any;
        _config: any;
        dispose(): void;
        _queueCallback(t: any, e: any, i?: boolean): void;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    getInstance(t: any): any;
    getOrCreateInstance(t: any, e?: {}): any;
    get VERSION(): string;
    get DATA_KEY(): string;
    get EVENT_KEY(): string;
    eventName(t: any): string;
    get Default(): {};
    get DefaultType(): {};
    get NAME(): void;
};
declare class Zs extends Zs_base {
    static get NAME(): string;
    static jQueryInterface(t: any): any;
    constructor(t: any);
    _parent: any;
    show(): void;
    _activate(t: any, e: any): void;
    _deactivate(t: any, e: any): void;
    _keydown(t: any): void;
    _getChildren(): never[];
    _getActiveElem(): null;
    _setInitialAttributes(t: any, e: any): void;
    _setInitialAttributesOnChild(t: any): void;
    _setInitialAttributesOnTargetPanel(t: any): void;
    _toggleDropDown(t: any, e: any): void;
    _setAttributeIfNotExists(t: any, e: any, i: any): void;
    _elemIsActive(t: any): any;
    _getInnerElement(t: any): any;
    _getOuterElement(t: any): any;
}
declare const mo_base: {
    new (t: any, i: any): {
        _element: any;
        _config: any;
        dispose(): void;
        _queueCallback(t: any, e: any, i?: boolean): void;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    getInstance(t: any): any;
    getOrCreateInstance(t: any, e?: {}): any;
    get VERSION(): string;
    get DATA_KEY(): string;
    get EVENT_KEY(): string;
    eventName(t: any): string;
    get Default(): {};
    get DefaultType(): {};
    get NAME(): void;
};
declare class mo extends mo_base {
    static get Default(): {
        animation: boolean;
        autohide: boolean;
        delay: number;
    };
    static get DefaultType(): {
        animation: string;
        autohide: string;
        delay: string;
    };
    static get NAME(): string;
    static jQueryInterface(t: any): any;
    _timeout: NodeJS.Timeout | null;
    _hasMouseInteraction: boolean;
    _hasKeyboardInteraction: boolean;
    show(): void;
    hide(): void;
    isShown(): any;
    _maybeScheduleHide(): void;
    _onInteraction(t: any, e: any): undefined;
    _setListeners(): void;
    _clearTimeout(): void;
}
declare const ps_base: {
    new (t: any, i: any): {
        _element: any;
        _config: any;
        dispose(): void;
        _queueCallback(t: any, e: any, i?: boolean): void;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
        _typeCheckConfig(t: any, e?: any): void;
    };
    getInstance(t: any): any;
    getOrCreateInstance(t: any, e?: {}): any;
    get VERSION(): string;
    get DATA_KEY(): string;
    get EVENT_KEY(): string;
    eventName(t: any): string;
    get Default(): {};
    get DefaultType(): {};
    get NAME(): void;
};
declare class ps extends ps_base {
    static get Default(): {
        allowList: {
            "*": (string | RegExp)[];
            a: string[];
            area: never[];
            b: never[];
            br: never[];
            col: never[];
            code: never[];
            dd: never[];
            div: never[];
            dl: never[];
            dt: never[];
            em: never[];
            hr: never[];
            h1: never[];
            h2: never[];
            h3: never[];
            h4: never[];
            h5: never[];
            h6: never[];
            i: never[];
            img: string[];
            li: never[];
            ol: never[];
            p: never[];
            pre: never[];
            s: never[];
            small: never[];
            span: never[];
            sub: never[];
            sup: never[];
            strong: never[];
            u: never[];
            ul: never[];
        };
        animation: boolean;
        boundary: string;
        container: boolean;
        customClass: string;
        delay: number;
        fallbackPlacements: string[];
        html: boolean;
        offset: number[];
        placement: string;
        popperConfig: null;
        sanitize: boolean;
        sanitizeFn: null;
        selector: boolean;
        template: string;
        title: string;
        trigger: string;
    };
    static get DefaultType(): {
        allowList: string;
        animation: string;
        boundary: string;
        container: string;
        customClass: string;
        delay: string;
        fallbackPlacements: string;
        html: string;
        offset: string;
        placement: string;
        popperConfig: string;
        sanitize: string;
        sanitizeFn: string;
        selector: string;
        template: string;
        title: string;
        trigger: string;
    };
    static get NAME(): string;
    static jQueryInterface(t: any): any;
    _isEnabled: boolean;
    _timeout: number;
    _isHovered: boolean | null;
    _activeTrigger: {};
    _popper: {
        state: {
            placement: string;
            orderedModifiers: never[];
            options: any;
            modifiersData: {};
            elements: {
                reference: any;
                popper: any;
            };
            attributes: {};
            styles: {};
        };
        setOptions: (i: any) => any;
        forceUpdate: () => void;
        update: () => any;
        destroy: () => void;
    } | null;
    _templateFactory: {
        _config: any;
        getContent(): any[];
        hasContent(): boolean;
        changeContent(t: any): /*elided*/ any;
        toHtml(): Element | undefined;
        _typeCheckConfig(t: any): void;
        _checkContent(t: any): void;
        _setContent(t: any, e: any, i: any): void;
        _maybeSanitize(t: any): any;
        _resolvePossibleFunction(t: any): any;
        _putElementInTemplate(t: any, e: any): undefined;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
    } | null;
    _newContent: any;
    tip: any;
    enable(): void;
    disable(): void;
    toggleEnabled(): void;
    toggle(): void;
    show(): void;
    hide(): void;
    update(): void;
    _isWithContent(): boolean;
    _getTipElement(): any;
    _createTipElement(t: any): any;
    setContent(t: any): void;
    _getTemplateFactory(t: any): {
        _config: any;
        getContent(): any[];
        hasContent(): boolean;
        changeContent(t: any): /*elided*/ any;
        toHtml(): Element | undefined;
        _typeCheckConfig(t: any): void;
        _checkContent(t: any): void;
        _setContent(t: any, e: any, i: any): void;
        _maybeSanitize(t: any): any;
        _resolvePossibleFunction(t: any): any;
        _putElementInTemplate(t: any, e: any): undefined;
        _getConfig(t: any): any;
        _configAfterMerge(t: any): any;
        _mergeConfigObj(t: any, e: any): any;
    };
    _getContentForTemplate(): {
        ".tooltip-inner": any;
    };
    _getTitle(): any;
    _initializeOnDelegatedTarget(t: any): any;
    _isAnimated(): any;
    _isShown(): any;
    _createPopper(t: any): {
        state: {
            placement: string;
            orderedModifiers: never[];
            options: any;
            modifiersData: {};
            elements: {
                reference: any;
                popper: any;
            };
            attributes: {};
            styles: {};
        };
        setOptions: (i: any) => any;
        forceUpdate: () => void;
        update: () => any;
        destroy: () => void;
    };
    _getOffset(): any;
    _resolvePossibleFunction(t: any): any;
    _getPopperConfig(t: any): any;
    _setListeners(): void;
    _hideModalHandler: (() => void) | undefined;
    _fixTitle(): void;
    _enter(): void;
    _leave(): void;
    _setTimeout(t: any, e: any): void;
    _isWithActiveTrigger(): boolean;
    _getDelegateConfig(): {
        selector: boolean;
        trigger: string;
    };
    _disposePopper(): void;
}
export { X as Alert, U as Button, St as Carousel, qt as Collapse, Qi as Dropdown, Ln as Modal, Qn as Offcanvas, vs as Popover, Ss as ScrollSpy, Zs as Tab, mo as Toast, ps as Tooltip };
//# sourceMappingURL=bootstrap.d.ts.map